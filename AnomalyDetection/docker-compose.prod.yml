# CAN異常検出管理システム - 本番環境用 Docker Compose
version: '3.8'

services:
  # SQL Server データベース (本番環境)
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: anomaly-detection-sqlserver-prod
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_SA_PASSWORD}
      - MSSQL_PID=Standard
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_prod_data:/var/opt/mssql
      - ./backups:/var/backups
    networks:
      - anomaly-detection-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Redis (本番環境)
  redis:
    image: redis:7-alpine
    container_name: anomaly-detection-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - anomaly-detection-network
    restart: always

  # ABP vNext Web API バックエンド (本番環境)
  backend:
    build:
      context: .
      dockerfile: src/AnomalyDetection.HttpApi.Host/Dockerfile
    container_name: anomaly-detection-backend-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Default=Server=sqlserver;Database=${DB_NAME};User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=true
      - ConnectionStrings__AbpTenantManagement=Server=sqlserver;Database=${DB_NAME};User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=true
      - App__SelfUrl=${BACKEND_URL}
      - App__AngularUrl=${FRONTEND_URL}
      - App__CorsOrigins=${CORS_ORIGINS}
      - AuthServer__Authority=${BACKEND_URL}
      - AuthServer__RequireHttpsMetadata=true
      - AuthServer__CertificatePassPhrase=${CERT_PASSPHRASE}
      - StringEncryption__DefaultPassPhrase=${ENCRYPTION_PASSPHRASE}
      - Redis__Configuration=redis:6379,password=${REDIS_PASSWORD}
    ports:
      - "80:80"
    depends_on:
      - sqlserver
      - redis
    networks:
      - anomaly-detection-network
    restart: always
    volumes:
      - ./logs:/app/Logs
      - ./certificates:/app/certificates:ro
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health-status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular フロントエンド (本番環境)
  frontend:
    build:
      context: angular
      dockerfile: Dockerfile
    container_name: anomaly-detection-frontend-prod
    environment:
      - NODE_ENV=production
    ports:
      - "443:80"
    depends_on:
      - backend
    networks:
      - anomaly-detection-network
    restart: always
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx リバースプロキシ (本番環境)
  nginx:
    image: nginx:alpine
    container_name: anomaly-detection-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - anomaly-detection-network
    restart: always

volumes:
  sqlserver_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  anomaly-detection-network:
    driver: bridge